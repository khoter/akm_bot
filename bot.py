import os
import json
import asyncio
import logging
from datetime import datetime

from telegram import (
    Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

from fill_pdf import fill_pdf
from email_sender import send_email
from config import BOT_TOKEN, TO_EMAIL, WEBAPP_URL, ALLOWED_CHAT_IDS, ALLOWED_USER_IDS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


# /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å WebApp
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.debug(f"[START] user_id = {user_id}")

    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return

    keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É", web_app=WebAppInfo(url=WEBAPP_URL))]],
        resize_keyboard=True
    )

    await update.message.reply_text("–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ web_app_data
async def handle_webapp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.debug(f"[WEBAPP] –ü–æ–ª—É—á–µ–Ω update: {update}")

    try:
        if not update.message:
            logger.warning("[WEBAPP] ‚ùå –ù–µ—Ç update.message.")
            return

        if update.effective_user.id not in ALLOWED_CHAT_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        if not update.message.web_app_data:
            logger.warning("[WEBAPP] ‚ùå –ù–µ—Ç web_app_data.")
            await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.")
            return

        raw_data = update.message.web_app_data.data
        logger.debug(f"[WEBAPP] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {raw_data}")

        cleaned_data = ''.join(c for c in raw_data if c >= ' ')
        data = json.loads(cleaned_data)

        logger.debug(f"[WEBAPP] –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: {data}")

        if not data.get("date"):
            data["date"] = datetime.now().strftime("%d.%m.%Y")

        output_dir = os.path.join(os.path.dirname(__file__), "output")
        os.makedirs(output_dir, exist_ok=True)

        filename = f"–ó–∞—è–≤–∫–∞_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        output_file = os.path.join(output_dir, filename)
        template_path = os.path.join(os.path.dirname(__file__), "template.pdf")

        logger.debug("[PDF] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF...")
        fill_pdf(template_path, output_file, data)
        logger.debug(f"[PDF] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {output_file}")

        logger.debug("[EMAIL] –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–æ—á—Ç—É...")
        send_email("–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫", "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞", output_file)
        logger.debug("[EMAIL] –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ –ø–æ—á—Ç–µ.")

        summary = (
            f"üì© <b>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</b>\n\n"
            f"<b>–î–∞—Ç–∞:</b> {data.get('date')}\n"
            f"<b>–í—Ä–µ–º—è:</b> {data.get('time_range')}\n"
            f"<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {data.get('company')}\n"
            f"<b>–ì—Ä—É–∑:</b> {data.get('cargo')} √ó {data.get('cargo_count')}\n"
            f"<b>–ú–∞—à–∏–Ω–∞:</b> {data.get('car_model')} ({data.get('car_plate')})\n"
            f"<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {data.get('person')}\n\n"
            f"<b>–î–æ–ø. –æ–ø—Ü–∏–∏:</b>\n" +
            "\n".join([
                f"‚Ä¢ {label}" for key, label in {
                    "use_lift": "–õ–∏—Ñ—Ç",
                    "materials_in": "–í–Ω–æ—Å –ú–¶",
                    "materials_out": "–í—ã–Ω–æ—Å –ú–¶",
                    "unloading_big": "–†–∞–∑–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
                    "loading_big": "–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
                    "unloading_small": "–†–∞–∑–≥—Ä—É–∑–∫–∞ –º–µ–ª–∫–æ–≥–∞–±–∞—Ä–∏—Ç–Ω–æ–≥–æ –≥—Ä—É–∑–∞",
                    "loading_small": "–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–ª–∫–æ–≥–∞–±–∞—Ä–∏—Ç–Ω–æ–≥–æ –≥—Ä—É–∑–∞"
                }.items() if data.get(key)
            ]) or "‚Äî"
        )

        for admin_id in ALLOWED_CHAT_IDS:
            try:
                await context.bot.send_message(chat_id=admin_id, text=summary, parse_mode="HTML")
                logger.debug(f"[SEND] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {admin_id}")
            except Exception as e:
                logger.error(f"[SEND] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç {admin_id}: {e}")

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –≤ handle_webapp")
        if update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.")


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    logger.info(f"[STARTING] BOT_TOKEN: {BOT_TOKEN}")
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp))

    logger.info("[BOT] –ó–∞–ø—É—Å–∫–∞–µ–º polling...")
    app.run_polling()







 
