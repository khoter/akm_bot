import os
import json
import logging
from datetime import datetime
from telegram import Update, WebAppData, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from config import BOT_TOKEN, WEBAPP_URL, ALLOWED_USER_IDS
from fill_pdf import fill_pdf
from email_sender import send_email

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ñ–æ—Ä–º—ã.")
        logger.warning(f"ACCESS DENIED: user {user_id} not in ALLOWED_USER_IDS")
        return

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É", web_app={'url': WEBAPP_URL})]
    ])

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É:",
        reply_markup=keyboard
    )
    logger.debug(f"Sent inline keyboard to user {user_id}")

async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    web_app_data: WebAppData = update.message.web_app_data

    logger.debug("[WEB_APP] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram:")
    logger.debug(web_app_data.data)

    if user_id not in ALLOWED_USER_IDS:
        await context.bot.send_message(chat_id=chat_id, text="‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ñ–æ—Ä–º—ã.")
        logger.warning(f"ACCESS DENIED: user {user_id} not in ALLOWED_USER_IDS")
        return

    try:
        data = json.loads(web_app_data.data)
        logger.debug(f"[WEB_APP] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω—ã: {data}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs("output", exist_ok=True)

        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        output_path = f"output/form_{user_id}_{timestamp}.pdf"
        logger.debug(f"[PDF] Output path: {output_path}")

        fill_pdf("template.pdf", output_path, data)
        logger.info(f"[PDF] –ó–∞—è–≤–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è {data.get('person', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")

        subject = f"–ó–∞—è–≤–∫–∞ –æ—Ç {data.get('person', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        body = "–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —á–µ—Ä–µ–∑ Telegram."

        send_email(subject, body, output_path)
        logger.info(f"[EMAIL] –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ—á—Ç—É: {output_path}")

        await context.bot.send_message(chat_id=chat_id, text="‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

    except Exception as e:
        logger.exception("[ERROR] –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await context.bot.send_message(chat_id=chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(
        filters.ALL & filters.UpdateType.MESSAGE & filters.Regex(".*") & filters.TEXT & filters.ChatType.PRIVATE,
        handle_web_app_data
    ))

    logger.info("Bot started...")
    app.run_polling()

if __name__ == "__main__":
    main()








 
