"""Telegram Web‚ÄëApp bot
~~~~~~~~~~~~~~~~~~~~~~
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏–∑ Web‚ÄëApp, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–æ.
"""
from __future__ import annotations

import os, json, asyncio, logging
from datetime import datetime
from logging.handlers import RotatingFileHandler

from telegram import Update, MenuButtonWebApp, WebAppInfo
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

from config import BOT_TOKEN, WEBAPP_URL, ALLOWED_USER_IDS
from fill_pdf import fill_pdf
from email_sender import send_email

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–û–ì–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
LOG_FORMAT = "%(asctime)s | %(levelname)-8s | %(name)s | %(message)s"
LOG_FILE   = "bot.log"
root = logging.getLogger()
root.setLevel(logging.INFO)
file_h = RotatingFileHandler(LOG_FILE, maxBytes=1_000_000, backupCount=10, encoding="utf-8")
file_h.setFormatter(logging.Formatter(LOG_FORMAT))
file_h.setLevel(logging.DEBUG)
root.addHandler(file_h)
console_h = logging.StreamHandler()
console_h.setFormatter(logging.Formatter(LOG_FORMAT))
console_h.setLevel(logging.INFO)
root.addHandler(console_h)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram.ext").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –•–ï–ù–î–õ–ï–†–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º (–∏–ª–∏ —É–±–∏—Ä–∞–µ–º) –∫–Ω–æ–ø–∫—É Web‚ÄëApp –≤ –º–µ–Ω—é —á–∞—Ç–∞"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if user_id not in ALLOWED_USER_IDS:
        # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –º–µ–Ω—é
        await context.bot.set_chat_menu_button(chat_id=chat_id, menu_button=None)
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ñ–æ—Ä–º—ã.")
        logger.warning("[ACCESS DENIED] user %s", user_id)
        return

    # —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    await context.bot.set_chat_menu_button(
        chat_id=chat_id,
        menu_button=MenuButtonWebApp(
            text="üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É",
            web_app=WebAppInfo(url=WEBAPP_URL),
        ),
    )
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üß© –≤ –º–µ–Ω—é —á–∞—Ç–∞.")
    logger.debug("Web‚ÄëApp‚Äë–∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è %s", user_id)


async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    raw = update.message.web_app_data.data  # type: ignore[attr-defined]
    logger.debug("RAW DATA: %s", raw)

    try:
        data = json.loads(raw)
    except json.JSONDecodeError as exc:
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π JSON: %s", exc)
        await update.effective_chat.send_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã.")
        return

    try:
        os.makedirs("output", exist_ok=True)
        pdf_path = f"output/form_{update.effective_user.id}_{datetime.now():%Y%m%d%H%M%S}.pdf"
        fill_pdf("template.pdf", pdf_path, data)
        subject = f"–ó–∞—è–≤–∫–∞ –æ—Ç {data.get('person', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        body    = "–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —á–µ—Ä–µ–∑ Telegram‚Äë–±–æ—Ç."
        await asyncio.to_thread(send_email, subject, body, pdf_path)
        await update.effective_chat.send_message("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        logger.info("–ó–∞—è–≤–∫–∞ %s –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", pdf_path)
    except Exception as exc:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏: %s", exc)
        await update.effective_chat.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.")


async def dump(update: Update, _: ContextTypes.DEFAULT_TYPE):
    logger.debug("UPDATE: %s", update)


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Exception while handling update %s", update, exc_info=context.error)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main() -> None:
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    app.add_handler(MessageHandler(filters.ALL, dump))  # —É–±–µ—Ä–∏—Ç–µ, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω –¥–∞–º–ø
    app.add_error_handler(error_handler)
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω‚Ä¶")
    app.run_polling()


if __name__ == "__main__":
    main()











 
