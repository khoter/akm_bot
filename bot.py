import os
import json
from datetime import datetime
from logging.handlers import RotatingFileHandler
from telegram import Update, WebAppData, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import asyncio

from config import BOT_TOKEN, WEBAPP_URL, ALLOWED_USER_IDS
from fill_pdf import fill_pdf
from email_sender import send_email

import logging

LOG_FORMAT = "%(asctime)s | %(levelname)-8s | %(name)s | %(message)s"
LOG_FILE   = "bot.log"

root = logging.getLogger()
root.setLevel(logging.INFO)        # –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å

# –§–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
file_h = RotatingFileHandler(LOG_FILE, maxBytes=1_000_000, backupCount=10, encoding="utf-8")
file_h.setFormatter(logging.Formatter(LOG_FORMAT))
file_h.setLevel(logging.DEBUG)     # –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ ‚Äî –≤ —Ñ–∞–π–ª
root.addHandler(file_h)

# –ö–æ—Ä–æ—Ç–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å
console_h = logging.StreamHandler()
console_h.setFormatter(logging.Formatter(LOG_FORMAT))
console_h.setLevel(logging.INFO)
root.addHandler(console_h)

# –ü—Ä–∏–≥–ª—É—à–∞–µ–º –±–æ–ª—Ç–ª–∏–≤—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram.ext._application").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)


# --- –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ñ–æ—Ä–º—ã.")
        logger.warning(f"[ACCESS DENIED] User {user_id} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ ALLOWED_USER_IDS")
        return

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É", web_app={'url': WEBAPP_URL})]
    ])

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É:",
        reply_markup=keyboard
    )
    logger.debug(f"[START] –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App ---
async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ‚ö†Ô∏è —Å–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    if not (update.message and update.message.web_app_data):
        return
    data_msg = update.message.web_app_data          # —Ç—É—Ç —É–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —á—Ç–æ –æ–Ω –µ—Å—Ç—å
    try:
        data = json.loads(data_msg.data)
    except json.JSONDecodeError as e:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON: %s", e)
        await update.effective_chat.send_message("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã.")
        return

    # PDF + –ø–∏—Å—å–º–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event-loop
    try:
        os.makedirs("output", exist_ok=True)
        stamp = datetime.now().strftime("%Y%m%d%H%M%S")
        pdf_path = f"output/form_{update.effective_user.id}_{stamp}.pdf"
        fill_pdf("template.pdf", pdf_path, data)

        await asyncio.to_thread(send_email,
                                f"–ó–∞—è–≤–∫–∞ –æ—Ç {data.get('person','–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                                "–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç.",
                                pdf_path)
        await update.effective_chat.send_message("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        logger.info("–ó–∞—è–≤–∫–∞ %s –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", pdf_path)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏")
        await update.effective_chat.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.")


# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))

    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è web_app_data
    app.add_handler(MessageHandler(filters.UpdateType.MESSAGE, handle_web_app_data))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()









 
