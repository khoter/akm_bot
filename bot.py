import json
import logging
import os
from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import BOT_TOKEN, TO_EMAIL, ALLOWED_USER_IDS
from fill_pdf import fill_pdf
from email_sender import send_email

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USER_IDS:
        logger.warning(f"‚õî –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    keyboard = [[
        KeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É", web_app=WebAppInfo(url="https://marsusya.ru/telegram-form/"))
    ]]
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USER_IDS:
        logger.warning(f"‚õî –î–∞–Ω–Ω—ã–µ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é.")
        return

    if not update.message.web_app_data:
        return

    try:
        logger.debug(f"[DATA RECEIVED] from {user_id}")

        raw_data = update.message.web_app_data.data
        data = json.loads(raw_data)
        logger.debug(f"[FORM DATA]: {data}")

        output_path = f"output/{user_id}_{data['date']}.pdf"
        os.makedirs("output", exist_ok=True)

        pdf_bytes = fill_pdf(output_path, data)
        send_email(pdf_bytes, TO_EMAIL)

        await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        logger.exception("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {e}")

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.UpdateType.MESSAGE, handle_web_app_data))
    app.run_polling()

if __name__ == "__main__":
    main()









 
