import os
import json
import logging
from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from fill_pdf import fill_pdf
from email_sender import send_email
from config import BOT_TOKEN, WEBAPP_URL, ALLOWED_USER_IDS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

TEMPLATE_PATH = "template.pdf"
TEMP_OUTPUT_PATH = "filled_form.pdf"

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.")
        return

    keyboard = [[KeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É", web_app=WebAppInfo(url=WEBAPP_URL))]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        data = json.loads(update.message.web_app_data.data)
        logger.debug(f"[DATA RECEIVED] from {user_id}")
        logger.debug(f"[FORM DATA]: {data}")

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ PDF
        fill_pdf(TEMPLATE_PATH, TEMP_OUTPUT_PATH, data)
        logger.debug("[PDF GENERATED]")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ email
        subject = "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫"
        body = "–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª —Å –∑–∞—è–≤–∫–æ–π –∏–∑ Telegram WebApp."
        send_email(subject, body, TEMP_OUTPUT_PATH)
        logger.debug("[EMAIL SENT]")

        await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

    except Exception as e:
        logger.exception("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {e}")

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()








 
