import os
import json
import asyncio
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)

from config import BOT_TOKEN, ALLOWED_CHAT_IDS, WEBAPP_URL, ALLOWED_USER_IDS
from fill_pdf import fill_pdf
from email_sender import send_email

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.debug(f"[START] user_id = {user_id}")

    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É", web_app=WebAppInfo(url=WEBAPP_URL))]
    ])
    await update.message.reply_text("–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏:", reply_markup=keyboard)


async def handle_webapp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.debug(f"[HANDLE_WEBAPP] –ü—Ä–∏—à—ë–ª update: {update}")

    try:
        if not update.message:
            logger.warning("[HANDLE_WEBAPP] ‚ùå –ù–µ—Ç update.message ‚Äî update –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return

        if update.effective_user.id not in ALLOWED_CHAT_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
            return

        if not update.message.web_app_data:
            logger.warning("[HANDLE_WEBAPP] ‚ùå –ù–µ—Ç web_app_data.")
            await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.")
            return

        raw_data = update.message.web_app_data.data
        logger.debug(f"[HANDLE_WEBAPP] –ü–æ–ª—É—á–µ–Ω—ã web_app_data: {raw_data}")

        cleaned_data = ''.join(c for c in raw_data if c >= ' ')
        data = json.loads(cleaned_data)

        logger.debug(f"[HANDLE_WEBAPP] –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")

        if not data.get("date"):
            data["date"] = datetime.now().strftime("%d.%m.%Y")

        output_dir = os.path.join(os.path.dirname(__file__), "output")
        os.makedirs(output_dir, exist_ok=True)

        date_str = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = os.path.join(output_dir, f"–ó–∞—è–≤–∫–∞_{date_str}.pdf")
        template_path = os.path.join(os.path.dirname(__file__), "template.pdf")

        logger.debug("[PDF] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ PDF...")
        fill_pdf(template_path, output_file, data)
        logger.debug(f"[PDF] PDF —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {output_file}")

        logger.debug("[EMAIL] –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email...")
        send_email("–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫", "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞", output_file)
        logger.debug("[EMAIL] Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

        await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ –ø–æ—á—Ç–µ.")

        summary = (
            f"üì© <b>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</b>\n\n"
            f"<b>–î–∞—Ç–∞:</b> {data.get('date')}\n"
            f"<b>–í—Ä–µ–º—è:</b> {data.get('time_range')}\n"
            f"<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {data.get('company')}\n"
            f"<b>–ì—Ä—É–∑:</b> {data.get('cargo')} √ó {data.get('cargo_count')}\n"
            f"<b>–ú–∞—à–∏–Ω–∞:</b> {data.get('car_model')} ({data.get('car_plate')})\n"
            f"<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {data.get('person')}\n\n"
            f"<b>–î–æ–ø. –æ–ø—Ü–∏–∏:</b>\n" +
            "\n".join([
                f"‚Ä¢ {label}" for key, label in {
                    "use_lift": "–õ–∏—Ñ—Ç",
                    "materials_in": "–í–Ω–æ—Å –ú–¶",
                    "materials_out": "–í—ã–Ω–æ—Å –ú–¶",
                    "unloading_big": "–†–∞–∑–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
                    "loading_big": "–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
                    "unloading_small": "–†–∞–∑–≥—Ä—É–∑–∫–∞ –º–µ–ª–∫–æ–≥–∞–±–∞—Ä–∏—Ç–Ω–æ–≥–æ –≥—Ä—É–∑–∞",
                    "loading_small": "–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–ª–∫–æ–≥–∞–±–∞—Ä–∏—Ç–Ω–æ–≥–æ –≥—Ä—É–∑–∞"
                }.items() if data.get(key)
            ]) or "‚Äî"
        )

        for admin_id in ALLOWED_CHAT_IDS:
            try:
                await context.bot.send_message(chat_id=admin_id, text=summary, parse_mode="HTML")
                logger.debug(f"[SEND] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {admin_id}")
            except Exception as e:
                logger.error(f"[SEND] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {admin_id}: {e}")

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –≤ handle_webapp")
        if update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.")


if __name__ == "__main__":
    print(f"[DEBUG] BOT_TOKEN: {BOT_TOKEN}")
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))

    # –õ–æ–≤–∏–º –≤—Å—ë –ø–æ–¥—Ä—è–¥, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å
    app.add_handler(MessageHandler(filters.ALL, handle_webapp))

    print("[DEBUG] –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    app.run_polling()






 
