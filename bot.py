"""Telegram Web‚ÄëApp bot
~~~~~~~~~~~~~~~~~~~~~~
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏–∑ Web‚ÄëApp, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–æ.
"""
from __future__ import annotations

import os, json, asyncio, logging
from datetime import datetime, timezone, time
from time import perf_counter
from logging.handlers import RotatingFileHandler

from telegram import Update, ReplyKeyboardMarkup, WebAppInfo, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

from config import BOT_TOKEN, WEBAPP_URL, ALLOWED_USER_IDS, REPORT_CHAT_ID, REPORT_TOPIC_ID, STATUS_CHAT_ID, STATUS_TOPIC_ID, EMAIL_DOMAIN
from fill_pdf import fill_pdf
from email_sender import send_email

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–û–ù–°–¢–ê–ù–¢–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
START_BTN = "üöÄ –ù–∞—á–∞—Ç—å"
FORM_BTN  = "üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É"
STOP_BTN  = "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"

ADMIN_ID = ALLOWED_USER_IDS[0]

START_TIME = datetime.now(timezone.utc)

PDF_PATH     = "output/form_latest.pdf"           
PDF_TMP_PATH = "output/.form_latest.tmp.pdf"      
PDF_LOCK     = asyncio.Lock() 

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–û–ì–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
LOG_FORMAT = "%(asctime)s | %(levelname)-8s | %(name)s | %(message)s"
LOG_FILE   = "bot.log"
root = logging.getLogger()
root.setLevel(logging.INFO)
file_h = RotatingFileHandler(LOG_FILE, maxBytes=1_000_000, backupCount=10, encoding="utf-8")
file_h.setFormatter(logging.Formatter(LOG_FORMAT))
file_h.setLevel(logging.DEBUG)
root.addHandler(file_h)
console_h = logging.StreamHandler()
console_h.setFormatter(logging.Formatter(LOG_FORMAT))
console_h.setLevel(logging.INFO)
root.addHandler(console_h)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram.ext").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–û–ì–ò –í –¢–ì ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class TelegramErrorHandler(logging.Handler):
    def __init__(self, app, chat_id: int, thread_id: int | None = None):
        super().__init__(logging.ERROR)
        self.app = app
        self.chat_id = chat_id
        self.thread_id = thread_id

    def emit(self, record: logging.LogRecord):
        if not getattr(self.app, "running", False):
            return

        msg = self.format(record)

        async def _send():
            try:
                await self.app.bot.send_message(
                    chat_id=self.chat_id,
                    message_thread_id=self.thread_id,
                    text=f"‚ùå *ERROR*\n```{msg}```",
                    parse_mode="Markdown",
                )
            except Exception:
                pass

        try:
            self.app.create_task(_send())
        except Exception:
            pass

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –§–£–ù–ö–¶–ò–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_menu_kb(user_id: int) -> ReplyKeyboardMarkup:
    buttons = [[KeyboardButton(FORM_BTN, web_app=WebAppInfo(url=WEBAPP_URL))]]
    if user_id == ADMIN_ID:
        buttons.append([STOP_BTN])                   
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

async def on_startup(app: Application):
    try:
        await app.bot.send_message(
            chat_id=STATUS_CHAT_ID,
            message_thread_id=STATUS_TOPIC_ID,
            text="‚úÖ –ë–æ—Ç *–∑–∞–ø—É—â–µ–Ω*",
            parse_mode="Markdown",
        )
    except Exception as e:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", e)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–õ–ê–í–ò–ê–¢–£–†–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
START_KB = ReplyKeyboardMarkup([[START_BTN]], resize_keyboard=True, one_time_keyboard=True)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –•–ï–ù–î–õ–ï–†–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cmd_start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=START_KB
    )

async def handle_start_button(update: Update, _: ContextTypes.DEFAULT_TYPE):
    if update.message.text != START_BTN:
        return
    user_id = update.effective_user.id

    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text(
            "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=ReplyKeyboardRemove()
        )
        logger.warning("[ACCESS DENIED] %s", user_id)
        return

    await update.message.reply_text(
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    reply_markup=build_menu_kb(user_id)
    )
    logger.debug("Menu shown to %s", user_id)

async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.web_app_data:
        return

    raw = update.message.web_app_data.data
    logger.debug("RAW DATA: %s", raw)

    try:
        data = json.loads(raw)
    except json.JSONDecodeError as exc:
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π JSON: %s", exc)
        await update.effective_chat.send_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã.")
        return

    if 'date' in data:
        try:
            d = datetime.strptime(data['date'], '%Y-%m-%d')
            data['date'] = d.strftime('%d.%m.%Y')
        except ValueError:
            pass

    cc_list = []
    mail3 = str(data.get("mail3", "")).strip().lower()
    if mail3:
        if re.fullmatch(r"[a-z]{3}", mail3):
            cc_email = f"{mail3}@{EMAIL_DOMAIN}"
            cc_list.append(cc_email)
            logger.info("CC email: %s", cc_email)
        else:
            logger.warning("–ò–≥–Ω–æ—Ä–∏—Ä—É—é –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ mail3=%r", mail3)

    try:
        os.makedirs("output", exist_ok=True)

        async with PDF_LOCK:
            fill_pdf("template.pdf", PDF_TMP_PATH, data)
            os.replace(PDF_TMP_PATH, PDF_PATH)

        subject = '–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ –æ—Ç –û–û–û "–ê–ö –ú–∏–∫—Ä–æ—Ç–µ—Ö"'
        body    = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–ö –¥–∞–Ω–Ω–æ–º—É –ø–∏—Å—å–º—É –ø—Ä–∏–ª–∞–≥–∞–µ—Ç—Å—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞."

        await asyncio.to_thread(send_email, subject, body, PDF_PATH, cc=cc_list)

        await update.effective_chat.send_message("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        logger.info("–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ %s –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. CC=%s", PDF_PATH, cc_list)

    except Exception as exc:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏: %s", exc)
        await update.effective_chat.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.")

    try:
        text = (
            "üìù *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\n"
            f"‚Ä¢ –î–∞—Ç–∞: {data.get('date')}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {data.get('time_range')}\n"
            f"‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: {data.get('company')}\n"
            f"‚Ä¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {data.get('car_model')} / {data.get('car_plate')}\n"
            f"‚Ä¢ –ì—Ä—É–∑: {data.get('cargo')} √ó {data.get('cargo_count')}\n"
            f"‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {data.get('person')}\n"
        )
        with open(PDF_PATH, "rb") as f:
            await context.bot.send_document(
                chat_id=REPORT_CHAT_ID,
                message_thread_id=REPORT_TOPIC_ID,
                document=f,
                filename=os.path.basename(PDF_PATH),
                caption=text,
                parse_mode="Markdown",
            )
    except Exception as exc:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –≤ —á–∞—Ç: %s", exc)

async def dump(update: Update, _: ContextTypes.DEFAULT_TYPE):
    logger.debug("UPDATE: %s", update)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Exception while handling update %s", update, exc_info=context.error)

async def handle_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return

    try:
        await context.bot.send_message(
            chat_id=STATUS_CHAT_ID,
            message_thread_id=STATUS_TOPIC_ID,
            text="‚èπ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω *–∞–¥–º–∏–Ω–æ–º*",
            parse_mode="Markdown",
        )
    except Exception:
        pass

    await update.message.reply_text("‚èπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å‚Ä¶", reply_markup=ReplyKeyboardRemove())
    logger.warning("Bot stopped by admin %s", ADMIN_ID)

    for h in list(root.handlers):
        if isinstance(h, TelegramErrorHandler):
            root.removeHandler(h)
            try:
                h.close()
            except Exception:
                pass

    try:
        jq = context.application.job_queue
        if jq:
            await jq.stop()
    except Exception:
        pass

    context.application.stop_running()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HEARTBEAT ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def heartbeat(context: ContextTypes.DEFAULT_TYPE):
    bot = context.bot 
    start = context.job.data["start"]
    now   = datetime.now(timezone.utc)
    uptime = now - start

    # ping
    t0 = perf_counter()
    await bot.get_me()
    ping_ms = int((perf_counter() - t0) * 1000)

    msg = (
        "üü¢ *–ë–æ—Ç –∂–∏–≤*\n"
        f"Start: `{start.strftime('%d.%m.%Y %H:%M:%S')} UTC`\n"
        f"Uptime: `{str(uptime).split('.')[0]}`\n"
        f"Ping: `{ping_ms} ms`"
    )
    await bot.send_message(chat_id=STATUS_CHAT_ID, message_thread_id=STATUS_TOPIC_ID, text=msg, parse_mode='Markdown')

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    app = Application.builder().token(BOT_TOKEN).post_init(on_startup).build()

    tg_handler = TelegramErrorHandler(app, STATUS_CHAT_ID, STATUS_TOPIC_ID)
    tg_handler.setFormatter(logging.Formatter(LOG_FORMAT))
    root.addHandler(tg_handler)

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f"^{START_BTN}$"), handle_start_button))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(f"^{STOP_BTN}$"),  handle_stop))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    app.add_error_handler(error_handler)

    app.job_queue.run_repeating(heartbeat, interval=1200, first=0, data={"start": START_TIME})

    app.run_polling()

if __name__ == "__main__":
    main()