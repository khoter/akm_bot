from pdfrw import PdfReader, PdfWriter, PdfDict, PdfName, PdfObject, PdfString

YES = PdfName("Yes")
OFF = PdfName("Off")

def fill_pdf(template_path: str, output_path: str, data: dict) -> None:
    pdf = PdfReader(template_path)

    for page in pdf.pages:
        for annot in page.Annots or []:
            if annot.Subtype != PdfName("Widget") or not annot.T:
                continue

            key = annot.T.to_unicode().strip("()")
            ft  = annot.FT

            # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
            if ft == PdfName("Tx") and key in data:
                annot.update(PdfDict(
                    V=PdfString.encode(str(data[key])),
                    AP=""                      # —Å–±—Ä–æ—Å —Å—Ç–∞—Ä–æ–≥–æ –≤–∏–¥–∞
                ))

            # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —á–µ–∫–±–æ–∫—Å
            elif ft == PdfName("Btn"):
                checked = str(data.get(key, "")).lower() in {"true", "on", "1", "yes"}
                state = YES if checked else OFF
                annot.update({PdfName("V"): state, PdfName("AS"): state})
                if '/AP' in annot:                          # üëà —Å–±—Ä–æ—Å–∏–º —Å—Ç–∞—Ä—ã–π –≤–∏–¥
                    del annot['/AP']

    # –∑–∞—Å—Ç–∞–≤–ª—è–µ–º —Ä–∏–¥–µ—Ä –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    acro = pdf.Root.AcroForm
    if acro:
        acro.update(PdfDict(NeedAppearances=PdfObject("true")))

    PdfWriter(output_path, trailer=pdf).write()